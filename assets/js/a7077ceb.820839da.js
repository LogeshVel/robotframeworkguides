"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1462],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),y=o,b=p["".concat(l,".").concat(y)]||p[y]||m[y]||i;return t?r.createElement(b,a(a({ref:n},c),{},{components:t})):r.createElement(b,a({ref:n},c))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},4967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:0,sidebar_label:"Create Non-Python Libraries",title:"Non-Python Libraries"},a=void 0,s={unversionedId:"extending_robot_framework/custom-libraries/non-python_library",id:"extending_robot_framework/custom-libraries/non-python_library",title:"Non-Python Libraries",description:"Rust",source:"@site/docs/extending_robot_framework/custom-libraries/non-python_library.md",sourceDirName:"extending_robot_framework/custom-libraries",slug:"/extending_robot_framework/custom-libraries/non-python_library",permalink:"/docs/extending_robot_framework/custom-libraries/non-python_library",draft:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/extending_robot_framework/custom-libraries/non-python_library.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Create Non-Python Libraries",title:"Non-Python Libraries"},sidebar:"tutorialSidebar",previous:{title:"\u26d4 TeamCity",permalink:"/docs/using_rf_in_ci_systems/ci/teamcity"},next:{title:"Create Python Libraries",permalink:"/docs/extending_robot_framework/custom-libraries/python_library"}},l={},u=[{value:"Rust",id:"rust",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"rust"},"Rust"),(0,o.kt)("p",null,'Create a dynamic system library (crate_type = "cdylib") from the following source code.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![allow(non_snake_case)]\n\nuse std::collections::HashMap;\n\nuse pyo3::prelude::*;\n\n#[pyfunction]\nfn sum_as_string(a: i32, b: i32) -> PyResult<String> {\n    Ok((a + b).to_string())\n}\n\n#[pyfunction]\nfn join_strings(a: Vec<String>) -> PyResult<String> {\n    Ok(a.join(","))\n}\n\n#[pyfunction]\nfn sum_values(a: HashMap<String, i32>) -> PyResult<i32> {\n    let mut values_sum = 0;\n    for (_key, value) in &a {\n        values_sum += value;\n    }\n    Ok(values_sum)\n}\n\n#[pymodule]\nfn RustyLibrary(_py: Python, m: &PyModule) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;\n    m.add_function(wrap_pyfunction!(join_strings, m)?)?;\n    m.add_function(wrap_pyfunction!(sum_values, m)?)?;\n    Ok(())\n}\n')),(0,o.kt)("p",null,"The library can then be used as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-robotframework"},"*** Settings ***\nLibrary    RustyLibrary\n\n*** Test Cases ***\nInteger Argument Conversion Test\n    ${x} =    Sum As String    ${5}    ${20}\n    Should Be Equal    ${x}    25\n\nList Argument Conversion Test\n    @{MY_LIST} =    Create List    spam    eggs\n\n    ${y} =    Join Strings    ${MY_LIST}\n    Should Be Equal    ${y}    spam,eggs\n\nDictionary Argument Conversion Test\n    &{MY_DICT} =    Create Dictionary    spam    ${11}    eggs    ${22}\n\n    ${z} =    Sum Values    ${MY_DICT}\n    Should Be Equal    ${z}    ${33}\n")),(0,o.kt)("p",null,"A complete working example that includes all build files (e.g. Cargo.toml) can be found on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mneiferbag/robot-rust-test-library"},"GitHub / mneiferbag / robot-python-test-library"),"."))}p.isMDXComponent=!0}}]);