"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(n),f=o,m=c["".concat(i,".").concat(f)]||c[f]||b[f]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[c]="string"==typeof e?e:o,s[1]=u;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_label:"Database Library",title:"Database Library"},s=void 0,u={unversionedId:"different_libraries/database",id:"different_libraries/database",title:"Database Library",description:"Database Library is a Robot Framework library that provides keywords for interacting with databases.",source:"@site/docs/different_libraries/database.md",sourceDirName:"different_libraries",slug:"/different_libraries/database",permalink:"/docs/different_libraries/database",draft:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/different_libraries/database.md",tags:[],version:"current",frontMatter:{sidebar_label:"Database Library",title:"Database Library"},sidebar:"tutorialSidebar",previous:{title:"Browser Library",permalink:"/docs/different_libraries/browser"},next:{title:"Requests Library",permalink:"/docs/different_libraries/requests"}},i={},l=[{value:"Installation",id:"installation",level:2},{value:"Install from PyPI",id:"install-from-pypi",level:3},{value:"Examples",id:"examples",level:2}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Database Library")," is a ",(0,o.kt)("a",{parentName:"p",href:"https://robotframework.org/"},"Robot Framework")," library that provides keywords for interacting with databases.",(0,o.kt)("br",{parentName:"p"}),"\n","It offers keywords to e.g.  "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"connect to a database"),(0,o.kt)("li",{parentName:"ul"},"execute SQL queries"),(0,o.kt)("li",{parentName:"ul"},"fetch results from the database"),(0,o.kt)("li",{parentName:"ul"},"assert table contents and result sets")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("h3",{id:"install-from-pypi"},"Install from PyPI"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install robotframework-databaselibrary\n")),(0,o.kt)("p",null,"To connect to a database, you also need to install a Python Module adhearing to the ",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/dev/peps/pep-0249/"},"Python Database API Specification v2.0"),".",(0,o.kt)("br",{parentName:"p"}),"\n","You can find a list of supported database modules ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.python.org/moin/DatabaseInterfaces"},"here"),"."),(0,o.kt)("p",null,"Examples are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/psycopg2/"},"psycopg2")," for PostgreSQL"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/cx-Oracle/"},"cx_Oracle")," for Oracle"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/PyMySQL/"},"pymysql")," for MySQL"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/pyodbc/"},"pyodbc")," for Microsoft SQL Server")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Check out the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/franz-see/Robotframework-Database-Library/tree/master/test"},"tests")," folder in the repository for examples."),(0,o.kt)("p",null,"Example for a PostgreSQL database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-robotframework"},"*** Settings ***\nSuite Setup       Connect To Database    psycopg2    ${DBName}    ${DBUser}    ${DBPass}    ${DBHost}    ${DBPort}\nSuite Teardown    Disconnect From Database\nLibrary           DatabaseLibrary\nLibrary           OperatingSystem\nLibrary           Collections\n\n*** Variables ***\n${DBHost}         localhost\n${DBName}         travis_ci_test\n${DBPass}         \"\"\n${DBPort}         5432\n${DBUser}         postgres\n\n*** Test Cases ***\nCreate person table\n    ${output} =    Execute SQL String    CREATE TABLE person (id integer unique,first_name varchar,last_name varchar);\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nExecute SQL Script - Insert Data person table\n    Comment    ${output} =    Execute SQL Script    ./${DBName}_insertData.sql\n    ${output} =    Execute SQL Script    ./my_db_test_insertData.sql\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nExecute SQL String - Create Table\n    ${output} =    Execute SQL String    create table foobar (id integer primary key, firstname varchar unique)\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nCheck If Exists In DB - Franz Allan\n    Check If Exists In Database    SELECT id FROM person WHERE first_name = 'Franz Allan';\n\nCheck If Not Exists In DB - Joe\n    Check If Not Exists In Database    SELECT id FROM person WHERE first_name = 'Joe';\n\nTable Must Exist - person\n    Table Must Exist    person\n\nVerify Row Count is 0\n    Row Count is 0    SELECT * FROM person WHERE first_name = 'NotHere';\n\nVerify Row Count is Equal to X\n    Row Count is Equal to X    SELECT id FROM person;    2\n\nVerify Row Count is Less Than X\n    Row Count is Less Than X    SELECT id FROM person;    3\n\nVerify Row Count is Greater Than X\n    Row Count is Greater Than X    SELECT * FROM person;    1\n\nRetrieve Row Count\n    ${output} =    Row Count    SELECT id FROM person;\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    2\n\nRetrieve records from person table\n    ${output} =    Execute SQL String    SELECT * FROM person;\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nVerify person Description\n    [Tags]    db    smoke\n    Comment    Query db for table column descriptions\n    @{queryResults} =    Description    SELECT * FROM person LIMIT 1;\n    Log Many    @{queryResults}\n    ${output} =    Set Variable    ${queryResults[0]}\n    Should Be Equal As Strings    ${output}    Column(name='id', type_code=23, display_size=None, internal_size=4, precision=None, scale=None, null_ok=None)\n    ${output} =    Set Variable    ${queryResults[1]}\n    Should Be Equal As Strings    ${output}    Column(name='first_name', type_code=1043, display_size=None, internal_size=-1, precision=None, scale=None, null_ok=None)\n    ${output} =    Set Variable    ${queryResults[2]}\n    Should Be Equal As Strings    ${output}    Column(name='last_name', type_code=1043, display_size=None, internal_size=-1, precision=None, scale=None, null_ok=None)\n    ${NumColumns} =    Get Length    ${queryResults}\n    Should Be Equal As Integers    ${NumColumns}    3\n\nVerify foobar Description\n    [Tags]    db    smoke\n    Comment    Query db for table column descriptions\n    @{queryResults} =    Description    SELECT * FROM foobar LIMIT 1;\n    Log Many    @{queryResults}\n    ${output} =    Set Variable    ${queryResults[0]}\n    Should Be Equal As Strings    ${output}    Column(name='id', type_code=23, display_size=None, internal_size=4, precision=None, scale=None, null_ok=None)\n    ${output} =    Set Variable    ${queryResults[1]}\n    Should Be Equal As Strings    ${output}    Column(name='firstname', type_code=1043, display_size=None, internal_size=-1, precision=None, scale=None, null_ok=None)\n    ${NumColumns} =    Get Length    ${queryResults}\n    Should Be Equal As Integers    ${NumColumns}    2\n\nVerify Query - Row Count person table\n    ${output} =    Query    SELECT COUNT(*) FROM person;\n    Log    ${output}\n    ${val}=    Get from list    ${output}    0\n    ${val}=    Convert to list    ${val}\n    ${val}=    Get from list    ${val}    0\n    Should be equal as Integers    ${val}    2\n\nVerify Query - Row Count foobar table\n    ${output} =    Query    SELECT COUNT(*) FROM foobar;\n    Log    ${output}\n    ${val}=    Get from list    ${output}    0\n    ${val}=    Convert to list    ${val}\n    ${val}=    Get from list    ${val}    0\n    Should be equal as Integers    ${val}    0\n\nVerify Query - Get results as a list of dictionaries\n    [Tags]    db    smoke\n    ${output} =    Query    SELECT * FROM person;    \\    True\n    Log    ${output}\n    Should Be Equal As Strings    &{output[0]}[first_name]    Franz Allan\n    Should Be Equal As Strings    &{output[1]}[first_name]    Jerry\n\nVerify Execute SQL String - Row Count person table\n    ${output} =    Execute SQL String    SELECT COUNT(*) FROM person;\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nVerify Execute SQL String - Row Count foobar table\n    ${output} =    Execute SQL String    SELECT COUNT(*) FROM foobar;\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nInsert Data Into Table foobar\n    ${output} =    Execute SQL String    INSERT INTO foobar VALUES(1,'Jerry');\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n\nVerify Query - Row Count foobar table 1 row\n    ${output} =    Query    SELECT COUNT(*) FROM foobar;\n    Log    ${output}\n    ${val}=    Get from list    ${output}    0\n    ${val}=    Convert to list    ${val}\n    ${val}=    Get from list    ${val}    0\n    Should be equal as Integers    ${val}    1\n\nVerify Delete All Rows From Table - foobar\n    Delete All Rows From Table    foobar\n    Comment    Sleep    2s\n\nVerify Query - Row Count foobar table 0 row\n    Row Count Is 0    SELECT * FROM foobar;\n    Comment    ${output} =    Query    SELECT COUNT(*) FROM foobar;\n    Comment    Log    ${output}\n    Comment    Should Be Equal As Strings    ${output}    [(0,)]\n\nDrop person and foobar tables\n    ${output} =    Execute SQL String    DROP TABLE IF EXISTS person,foobar;\n    Log    ${output}\n    Should Be Equal As Strings    ${output}    None\n")))}c.isMDXComponent=!0}}]);