"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6829],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=p(n),d=s,c=f["".concat(o,".").concat(d)]||f[d]||m[d]||a;return n?r.createElement(c,i(i({ref:t},u),{},{components:n})):r.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[f]="string"==typeof e?e:s,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={},i="Listener Interface",l={unversionedId:"extending_robot_framework/listeners_prerun_api/listeners",id:"extending_robot_framework/listeners_prerun_api/listeners",title:"Listener Interface",description:"Listeners can  listen \ud83d\udc42 to the events that are fired during the execution of a test suite and react to them.",source:"@site/docs/extending_robot_framework/listeners_prerun_api/listeners.md",sourceDirName:"extending_robot_framework/listeners_prerun_api",slug:"/extending_robot_framework/listeners_prerun_api/listeners",permalink:"/docs/extending_robot_framework/listeners_prerun_api/listeners",draft:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/extending_robot_framework/listeners_prerun_api/listeners.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/extending_robot_framework/listeners_prerun_api/overview"},next:{title:"PreRunModifier",permalink:"/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier"}},o={},p=[{value:"Interface Versions - v2 and v3",id:"interface-versions---v2-and-v3",level:2},{value:"Using Listeners",id:"using-listeners",level:2},{value:"Class or Module",id:"class-or-module",level:3},{value:"Listener Templates",id:"listener-templates",level:2},{value:"Example Listeners",id:"example-listeners",level:2},{value:"Stop on Failure Listener",id:"stop-on-failure-listener",level:3},{value:"Report Listener",id:"report-listener",level:3}],u={toc:p};function f(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"listener-interface"},"Listener Interface"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Listeners")," can  ",(0,s.kt)("em",{parentName:"p"},"listen")," \ud83d\udc42 to the events that are fired during the execution of a test suite and react to them.",(0,s.kt)("br",{parentName:"p"}),"\n","They are like a ",(0,s.kt)("em",{parentName:"p"},"hook")," \ud83e\ude9d into the test run, allowing us to execute code at a specific point in time during the execution.",(0,s.kt)("br",{parentName:"p"}),"\n","You can use them to e.g. notify other systems about the progress of your test suite in real time.",(0,s.kt)("br",{parentName:"p"}),"\n","Examples of events that can be listened to are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Test Suite Started")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Test Suite Ended")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Test Started")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Test Ended")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Keyword Started")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Keyword Ended")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Message")),(0,s.kt)("li",{parentName:"ul"},"...")),(0,s.kt)("p",null,"One advantage of using a Listener instead of a Custom Library is that you are very flexible. You can enable/disable the Listener for every test execution without modifying your tests. Listeners will just run in the background and do their job.  "),(0,s.kt)("p",null,"Check out the ",(0,s.kt)("a",{parentName:"p",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface"},"Robot Framework User Guide")," for more information."),(0,s.kt)("h2",{id:"interface-versions---v2-and-v3"},"Interface Versions - v2 and v3"),(0,s.kt)("p",null,"There are two versions of the Listener Interface - v2 and v3."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods"},"Listener Interface Versions")),(0,s.kt)("p",null,"Inside the Listener file, you need to define a variable called ",(0,s.kt)("inlineCode",{parentName:"p"},"ROBOT_LISTENER_API_VERSION")," and set it to either ",(0,s.kt)("inlineCode",{parentName:"p"},"2")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,s.kt)("p",null,"Examples:  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"ROBOT_LISTENER_API_VERSION = 2\n\ndef end_test(name, attrs):\n    if attrs['status'] == 'FAIL':\n        print('Test \"%s\" failed: %s' % (name, attrs['message']))\n        input('Press enter to continue.')\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"ROBOT_LISTENER_API_VERSION = 3\n\ndef end_test(data, result):\n    if not result.passed:\n        print('Test \"%s\" failed: %s' % (result.name, result.message))\n        input('Press enter to continue.')\n")),(0,s.kt)("p",null,"One main difference between both versions is:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"v2 allows you to ",(0,s.kt)("strong",{parentName:"li"},"read")," the attributes of the test case, keyword, etc.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"main purpose is reporting and monitoring the execution of the test suite"))),(0,s.kt)("li",{parentName:"ul"},"v3 also allows you to ",(0,s.kt)("strong",{parentName:"li"},"read")," and ",(0,s.kt)("strong",{parentName:"li"},"modify")," the attributes of the test case, keyword, etc.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"changes will have a direct effect on the execution of the test suite"),(0,s.kt)("li",{parentName:"ul"},"beside reporting and monitoring, you can use it to e.g. skip tests, modify test data, etc.")))),(0,s.kt)("p",null,"However, some methods like ",(0,s.kt)("inlineCode",{parentName:"p"},"start_keyword")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"end_keyword")," are only available in the v2."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-version-2"},"Listener v2 methods")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-version-3"},"Listener v3 methods")),(0,s.kt)("h2",{id:"using-listeners"},"Using Listeners"),(0,s.kt)("p",null,"Start your test suite with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--listener")," option and the path to the listener file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"robot --listener path/to/listener.py tests\n")),(0,s.kt)("h3",{id:"class-or-module"},"Class or Module"),(0,s.kt)("p",null,"You can use a Listener as a class or as a module.",(0,s.kt)("br",{parentName:"p"}),"\n","When using a class, I recommend to use the same name for the class and the file.   "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="ListenerClass.py"',title:'"ListenerClass.py"'},"\nClass ListenerClass:\n\n    ROBOT_LISTENER_API_VERSION = 3\n\n    def __init__(self):\n        pass\n\n    def start_suite(self, data, result):\n        pass\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="ListenerModule.py"',title:'"ListenerModule.py"'},"\ndef start_suite(data, result):\n    pass\n")),(0,s.kt)("h2",{id:"listener-templates"},"Listener Templates"),(0,s.kt)("p",null,"You can use the following templates to create your own Listener.",(0,s.kt)("br",{parentName:"p"}),"\n","Just copy the code and paste it into a new file.",(0,s.kt)("br",{parentName:"p"}),"\n","Add your own code to the methods you want to use.",(0,s.kt)("br",{parentName:"p"}),"\n","Remove the methods you don't need."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Listener Template v2"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="RobotListenerV2.py"',title:'"RobotListenerV2.py"'},'from robot.libraries.BuiltIn import BuiltIn\n\nb = BuiltIn()\n\nclass RobotListenerV2:\n\n    ROBOT_LISTENER_API_VERSION = 2\n    ROBOT_LIBRARY_SCOPE = "GLOBAL"\n\n    def __init__(self):\n        self.ROBOT_LIBRARY_LISTENER = self\n        pass\n\n    def start_suite(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def start_test(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def start_keyword(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def end_keyword(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def end_test(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def end_suite(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def log_message(self, message):\n        print(message)\n        pass\n\n    def message(self, message):\n        print(message)\n\n        pass\n\n    def library_import(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def resource_import(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def variables_import(self, name, attrs):\n        print(name)\n        print(attrs)\n        pass\n\n    def output_file(self, path):\n        print(path)\n        pass\n\n    def log_file(self, path):\n        print(path)\n        pass\n\n    def report_file(self, path):\n        print(path)\n        pass\n\n    def xunit_file(self, path):\n        print(path)\n        pass\n\n    def debug_file(self, path):\n        print(path)\n        pass\n\n    def close(self):\n        pass\n'))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Listener Template v3"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="RobotListenerV3.py"',title:'"RobotListenerV3.py"'},'from robot.libraries.BuiltIn import BuiltIn\n\n\nclass RobotListenerV3:\n\n    ROBOT_LIBRARY_SCOPE = "GLOBAL"\n    ROBOT_LISTENER_API_VERSION = 3\n\n    def __init__(self):\n        pass\n\n    def start_suite(self, suite, result):\n        pass\n\n    def start_test(self, test, result):\n        pass\n\n    def end_test(self, test, result):\n        pass\n\n    def end_suite(self, suite, result):\n        pass\n\n    def log_message(self, message):\n        pass\n\n    def message(self, message):\n        pass\n\n    def debug_file(self, path):\n        pass\n\n    def output_file(self, path):\n        pass\n\n    def xunit_file(self, path):\n        pass\n\n    def log_file(self, path):\n        pass\n\n    def report_file(self, path):\n        pass\n\n    def close(self):\n        pass\n'))),(0,s.kt)("h2",{id:"example-listeners"},"Example Listeners"),(0,s.kt)("h3",{id:"stop-on-failure-listener"},"Stop on Failure Listener"),(0,s.kt)("p",null,"A Listener which stops the execution of the test suite if a test fails."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="listener.py"',title:'"listener.py"'},'"""Listener that stops execution if a test fails."""\n\nROBOT_LISTENER_API_VERSION = 3\n\ndef end_test(data, result):\n    if not result.passed:\n        print(\'Test "%s" failed: %s\' % (result.name, result.message))\n        input(\'Press enter to continue.\')\n')),(0,s.kt)("h3",{id:"report-listener"},"Report Listener"),(0,s.kt)("p",null,"A Listener which writes the name and status of each test to a file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="ReportListener.py"',title:'"ReportListener.py"'},'class ReportListener:\n    ROBOT_LISTENER_API_VERSION = 3\n\n    def __init__(self, filename=\'report.md\'):\n        self.filename = filename\n        self.fh = open(self.filename, \'w\')\n        self.fh.write("# Robot Framework Report\\n")\n        self.fh.write("|Test|Status|\\n")\n        self.fh.write("|---|---|\\n")\n\n    def close(self):\n        self.fh.close()\n\n    def end_test(self, data, result):\n        self.fh.write(f"|{result.name}|{result.status}|\\n")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"robot --listener ReportListener.py tests\n")))}f.isMDXComponent=!0}}]);